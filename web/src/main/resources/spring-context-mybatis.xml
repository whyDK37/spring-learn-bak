<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd" default-lazy-init="false">

    <!--<description>Databases Configuration</description>-->

    <!--&lt;!&ndash; 引入 jdbc.properties属性文件 &ndash;&gt;-->
    <!--<context:property-placeholder location="classpath:property/jdbc.properties"/>-->

    <!--<context:component-scan base-package="com.icfcc.db.*,com.icfcc.modules.*" use-default-filters="false">&lt;!&ndash; base-package 如果多个，用“,”分隔 &ndash;&gt;-->
        <!--<context:include-filter type="annotation" expression="com.icfcc.db.anon.MyBatisDao"/>-->
    <!--</context:component-scan>-->
    <!--&lt;!&ndash;<bean id="userService" class="sample.web.HelloWorldController.UserServiceImpl" autowire="byName">&ndash;&gt;-->
    <!--&lt;!&ndash;</bean>&ndash;&gt;-->

    <!--&lt;!&ndash; JNDI方式配置数据源 &ndash;&gt;-->
    <!--&lt;!&ndash; <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> <property name="jndiName" value="${jndiName}"></property> </bean> &ndash;&gt;-->
    <!--&lt;!&ndash; ========================================配置数据源========================================= &ndash;&gt;-->
    <!--&lt;!&ndash; 配置数据源，使用的是alibaba的Druid(德鲁伊)数据源 &ndash;&gt;-->
    <!--<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">-->
        <!--&lt;!&ndash;<property name="driverClassName" value="${jdbc.driver}" />&ndash;&gt;-->
        <!--<property name="url" value="${jdbc.url}"/>-->
        <!--<property name="username" value="${jdbc.username}"/>-->
        <!--<property name="password" value="${jdbc.password}"/>-->
        <!--&lt;!&ndash; 初始化连接大小 &ndash;&gt;-->
        <!--<property name="initialSize" value="${jdbc.pool.initialSize}"/>-->
        <!--&lt;!&ndash; 连接池最大使用连接数量 &ndash;&gt;-->
        <!--<property name="maxActive" value="${jdbc.pool.maxActive}"/>-->
        <!--&lt;!&ndash; 连接池最大空闲 &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="maxIdle" value="20" />&ndash;&gt;-->
        <!--&lt;!&ndash; 连接池最小空闲 &ndash;&gt;-->
        <!--<property name="minIdle" value="${jdbc.pool.minIdle}"/>-->
        <!--&lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="${jdbc.pool.maxWait}"/>-->
        <!--&lt;!&ndash;-->
        <!--<property name="poolPreparedStatements" value="true" />-->
        <!--<property name="maxPoolPreparedStatementPerConnectionSize" value="33" />-->
        <!--&ndash;&gt;-->
        <!--<property name="validationQuery" value="${jdbc.testSql}"/>-->
        <!--<property name="testOnBorrow" value="false"/>-->
        <!--<property name="testOnReturn" value="false"/>-->
        <!--<property name="testWhileIdle" value="true"/>-->
        <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="60000"/>-->
        <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="25200000"/>-->
        <!--&lt;!&ndash; 打开removeAbandoned功能 &ndash;&gt;-->
        <!--<property name="removeAbandoned" value="true"/>-->
        <!--&lt;!&ndash; 1800秒，也就是30分钟 &ndash;&gt;-->
        <!--<property name="removeAbandonedTimeout" value="1800"/>-->
        <!--&lt;!&ndash; 关闭abanded连接时输出错误日志 &ndash;&gt;-->
        <!--<property name="logAbandoned" value="true"/>-->
        <!--&lt;!&ndash; 监控数据库 &ndash;&gt;-->
        <!--&lt;!&ndash; <property name="filters" value="stat" /> &ndash;&gt;-->
        <!--<property name="filters" value="mergeStat"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; ========================================分隔线========================================= &ndash;&gt;-->

    <!--&lt;!&ndash; ========================================针对myBatis的配置项============================== &ndash;&gt;-->
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
        <!--&lt;!&ndash; 自动扫描mapping/modules/目录下的所有SQL映射的xml文件, 省掉Configuration.xml里的手工配置-->
        <!--value="classpath:me/gacl/mapping/*.xml"指的是classpath(类路径)下me.gacl.mapping包中的所有xml文件-->
        <!--UserMapper.xml位于me.gacl.mapping包下，这样UserMapper.xml就可以被自动扫描&ndash;&gt;-->
        <!--<property name="mapperLocations">-->
            <!--<list>-->
                <!--<value>classpath:com/icfcc/db/sys/*Mapper.xml</value>-->
                <!--<value>classpath:com/icfcc/db/user/*Mapper.xml</value>-->
                <!--&lt;!&ndash;<value>classpath:sample/UserMapper.xml</value>&ndash;&gt;-->
            <!--</list>-->
        <!--</property>-->
        <!--<property name="plugins">-->
            <!--<array>-->
                <!--<bean class="com.icfcc.db.pagehelper.PageHelper" p:properties="dialect=mysql" />-->
                <!--<bean class="com.icfcc.db.orderhelper.OrderByHelper" p:properties="dialect=mysql" />-->
            <!--</array>-->
        <!--</property>-->
        <!--&lt;!&ndash;<property name="configLocation" value="classpath:/mybatis-config.xml"></property>&ndash;&gt;-->
    <!--</bean>-->

    <!--&lt;!&ndash; 配置扫描器 &ndash;&gt;-->
    <!--<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
        <!--&lt;!&ndash; 扫描 basePackage 这个包以及它的子包下的所有映射接口类 &ndash;&gt;-->
        <!--<property name="basePackage" value="com.icfcc.db,sample"/>-->
        <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->
        <!--&lt;!&ndash; mappers must apply this annotation &ndash;&gt;-->
        <!--<property name="annotationClass" value="com.icfcc.db.anon.MyBatisDao"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; ========================================分隔线========================================= &ndash;&gt;-->
    <!--&lt;!&ndash; 配置Spring的事务管理器 &ndash;&gt;-->
    <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 注解方式配置事物 &ndash;&gt;-->
    <!--&lt;!&ndash; <tx:annotation-driven transaction-manager="transactionManager" /> &ndash;&gt;-->

    <!--&lt;!&ndash; 拦截器方式配置事物 &ndash;&gt;-->
    <!--<tx:advice id="transactionAdvice" transaction-manager="transactionManager">-->
        <!--<tx:attributes>-->
            <!--<tx:method name="add*" propagation="REQUIRED"/>-->
            <!--<tx:method name="append*" propagation="REQUIRED"/>-->
            <!--<tx:method name="insert*" propagation="REQUIRED"/>-->
            <!--<tx:method name="save*" propagation="REQUIRED"/>-->
            <!--<tx:method name="update*" propagation="REQUIRED"/>-->
            <!--<tx:method name="modify*" propagation="REQUIRED"/>-->
            <!--<tx:method name="edit*" propagation="REQUIRED"/>-->
            <!--<tx:method name="delete*" propagation="REQUIRED"/>-->
            <!--<tx:method name="remove*" propagation="REQUIRED"/>-->
            <!--<tx:method name="repair" propagation="REQUIRED"/>-->
            <!--<tx:method name="delAndRepair" propagation="REQUIRED"/>-->

            <!--<tx:method name="get*" propagation="SUPPORTS"/>-->
            <!--<tx:method name="find*" propagation="SUPPORTS"/>-->
            <!--<tx:method name="load*" propagation="SUPPORTS"/>-->
            <!--<tx:method name="search*" propagation="SUPPORTS"/>-->
            <!--<tx:method name="datagrid*" propagation="SUPPORTS"/>-->

            <!--<tx:method name="*" propagation="SUPPORTS"/>-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!--&lt;!&ndash;<aop:config>&ndash;&gt;-->
        <!--&lt;!&ndash;<aop:pointcut id="transactionPointcut" expression="execution(* com.icfcc.modules.auth..*.*(..))"/>&ndash;&gt;-->
        <!--&lt;!&ndash;<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice"/>&ndash;&gt;-->
    <!--&lt;!&ndash;</aop:config>&ndash;&gt;-->


    <!--&lt;!&ndash; 配置druid监控spring jdbc &ndash;&gt;-->
    <!--<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">-->
    <!--</bean>-->
    <!--<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">-->
        <!--<property name="patterns">-->
            <!--<list>-->
                <!--<value>mapping.modules.auth.service.*</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<aop:config>-->
    <!--<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />-->
    <!--</aop:config>-->

</beans>